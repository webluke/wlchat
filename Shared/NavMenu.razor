@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject ChatService ChatService

<ul class="chat-list">
    @if (Threads != null)
    {
        @foreach (var thread in Threads)
        {
            <li class="chat-list-item active">
                <span class="chat-name"><a class="nav-link" href="@($"/chat/{thread.Id}")">@thread.Title</a></span>
                <button class="remove-chat-btn" title="Remove chat" @onclick="() => DeleteThread(thread.Id)">🗑️</button>
            </li>
        }
    }
</ul>
<div class="sidebar-user">
    <AuthorizeView>
        <Authorized>
            <UserInfo />
        </Authorized>
        <NotAuthorized>
            <button class="login-btn" @onclick="Login">Login</button>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private List<ChatThread> Threads;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(c =>
                    c.Type == "sub" ||
                    c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"
                )?.Value;
        if (!string.IsNullOrEmpty(userId))
        {
            Threads = await ChatService.GetThreadsForUserAsync(userId);
        }
    }

    private async Task DeleteThread(int threadId)
    {
        await ChatService.DeleteThreadAsync(threadId);
        Threads = Threads.Where(t => t.Id != threadId).ToList();

        // If the deleted thread is currently open, redirect to new chat
        var currentUri = Navigation.Uri;
        if (currentUri.EndsWith($"/chat/{threadId}"))
        {
            Navigation.NavigateTo("/chat", forceLoad: true);
        }

        StateHasChanged();
    }

    private void Login()
    {
        Navigation.NavigateTo("login", true);
    }
}
